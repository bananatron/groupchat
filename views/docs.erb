<h1>Docs</h1><br>

<h2>Getting Versions</h2>
<p>You can get the version of your application by making a web call from any application using the available routes below.</p>
  
<div><h3><a target="_blank" href="/guid/123x/text">/guid/(unique id)/text</a></h3>
This route will return a text/string in the following format (using a '^' delimiter):
  <br>
  <code>Demo App^Brief description about demo app^http://runding.com/download^1.0.2.1^Description to go along with download link.<br>
<i> (App name) ^ (App description) ^ (Download link) ^ (Current version) ^ (Download link description)</i></code>
</div>

<div><h3><a target="_blank" href="/guid/123x/text/&_&">/guid/(unique id)/text/(custom delimiter)</a></h3>
This route will return a text/string in the standard text format as shown above, but you can supply your own delimiting character.
  <br>
</div>

<div><h3><a target="_blank" href="/guid/123x/json">/guid/(unique id)/json</a></h3>
This route will return the raw JSON blob from the database, for the identifier specified, as shown below:
  <br>
  <code>
{"app_description":"Brief description about demo app","app_name":"Demo App","get_link":"http://runding.com/download","guid":"123x","link_description":"Description to go along with download link.","user":"spenser","version":"1.0.2.1"}
  <br>
  </code>
</div>
<br><br>

<h2>.NET Example</h2>
A .NET application will generate a new GUID for each assembly (I think), which means it's probably the best identifier to use for version tracking. Alternatively, you can make your unique identifier anything (as long as it doesn't already exist in the db), and simply use that identifier in your web service calls. Below is a C# example of a .NET application which refers to it's current version and assembly guid.<br><br>
<code>
  //Get Version and Guid from your assembly information<br>
  var version = System.Reflection.Assembly.GetExecutingAssembly().GetName().Version;<br>
  var app_guid = Assembly.GetExecutingAssembly().GetType().GUID.ToString();<br>
  <br>
  var results = "";<br>
  List<string> results_list = new List<string>();<br>
<br>
  // Create the web request  <br>
  HttpWebRequest request = WebRequest.Create("http://versioneer.herokuapp.com" + app_guid + "/text") as HttpWebRequest;<br>
<br>
  // Get response  <br>
  using (HttpWebResponse response = request.GetResponse() as HttpWebResponse) {<br>
  &nbsp;&nbsp;&nbsp;&nbsp;// Get the response stream  <br>
  &nbsp;&nbsp;&nbsp;&nbsp;StreamReader reader = new StreamReader(response.GetResponseStream());<br>
<br>
  &nbsp;&nbsp;&nbsp;&nbsp;//Remember, by default, calling a <b>text</b> request from versioneer returns a string with a '^' delimeter<br>
  &nbsp;&nbsp;&nbsp;&nbsp;results = reader.ReadToEnd(); //Save results<br>
  &nbsp;&nbsp;&nbsp;&nbsp;string[] results_array = results.Split('^'); //Split response based on delimiter<br>
  &nbsp;&nbsp;&nbsp;&nbsp;//Identify any relevant data from response<br>
  &nbsp;&nbsp;&nbsp;&nbsp;var app_name = results_array[0];<br>
  &nbsp;&nbsp;&nbsp;&nbsp;var app_description = results_array[1];<br>
  &nbsp;&nbsp;&nbsp;&nbsp;var get_link = results_array[2];<br>
  &nbsp;&nbsp;&nbsp;&nbsp;var v = results_array[3];<br>
  &nbsp;&nbsp;&nbsp;&nbsp;var link_description = results_array[4];<br>
<br>
  &nbsp;&nbsp;&nbsp;&nbsp;if (v != version.ToString()){<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Example messagebox to show the user they're outdated, but you can obviously do anything.<br>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MessageBox.Show("There is a new version of this application (" + v + ") . Please visit " + get_link + " for the newest version!" );<br>
  &nbsp;&nbsp;&nbsp;&nbsp;}<br>
}<br>
  //If you have any C# related questions, ask Dan.
</code>
<br><br>

<h2>Deleting Records</h2>
Records can be created and edited through the web UI, but must be removed directly through Firebase.
<br><br>
  
<h2>Version Data Security</h2>
<strike>There is none.</strike> (v1.1)<br>
Versioneer uses rudamentary authentication via record/user data stored on Firebase using encrypted passwords and secret keys. Only the user who created the entry will have access to edit it, although anyone can call for the version information.<br>Regardless, build for cases where your app can't connect to the web service and/or can't retreive the info.
<br><br>
  
<h2>Questions?</h2>
Ask lil' skippy.<br><small>Or Spenser...</small>
<br><br>
    
<h2>Changelog</h2>
  <b>TODO</b> - Add additional app record form validations<br>
  <b>1.1</b> - Added sessions & authentication<br>
  <b>1.1</b> - Restructured db for faster sets/gets<br>
  <b>1.0</b> - Initial release
<br><br>
  